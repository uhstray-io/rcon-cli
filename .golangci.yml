run:
  skip-dirs:
    - vendor/
  skip-files:
    - ".*_test.go$"

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

# SEE: https://golangci-lint.run/usage/configuration/
linters-settings:
  cyclop:
    # the maximal code complexity to report
    max-complexity: 12
    # the maximal average package complexity. If it's higher than 0.0 (float) the check is enabled (default 0.0)
    package-average: 0.0
    # should ignore tests (default false)
    skip-tests: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 200
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  funlen:
    # default is 60
    lines: 70
    # default is 40
    statements: 40
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - performance
      - style
      - experimental
    disabled-checks:
      - paramTypeCombine
    #  - whyNoLint
    #  - commentedOutCode
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  godox:
    keywords:
      - "BUG"
      - "FIXME"
    #  - "TODO"
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/golangci/golangci-lint
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0
  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - os.Chmod
      - os.Mkdir
      - os.MkdirAll
      - os.OpenFile
      - os.WriteFile
      - io.Reader
      - io.Writer
      - \*cli.Context
  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by logutils.Log, logrus
      # is allowed to use only in logutils package
      - github.com/Sirupsen/logrus
      - gopkg.in/sirupsen/logrus.v0
      - gopkg.in/sirupsen/logrus.v1
      - gopkg.in/Sirupsen/logrus.v0
      - gopkg.in/Sirupsen/logrus.v1
  lll:
    line-length: 120 # 120 is default
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
        yaml: snake
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  misspell:
    locale: US
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - telnet.DialInteractive(
      - Close()
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: true
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: true
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0

linters:
  enable-all: true
  disable:
    - interfacer # is deprecated (since v1.38.0)
    - scopelint # is deprecated (since v1.39.0)
    - golint # is deprecated (since v1.41.0)
    - maligned # is deprecated (since v1.38.0)
    - ifshort # is deprecated (since v1.48.0)
    - deadcode # is deprecated (since v1.49.0)
    - nosnakecase # is deprecated (since v1.48.1)
    - varcheck # is deprecated (since v1.49.0)
    - exhaustivestruct # is deprecated (since v1.46.0)
    - structcheck # is deprecated (since v1.49.0)
    - rowserrcheck # is disabled because of generics
    - sqlclosecheck # is disabled because of generics
    - structcheck # is disabled because of generics
    - wastedassign # is disabled because of generics
    - varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope

issues:
  exclude:
    - "Version`? is a global variable" # gochecknoglobals
    - "cognitive complexity \\d+ of func `Interactive` is high" # gocognit
    - "are|is missing in" # exhaustivestruct # v1.33

  exclude-rules:
    - source: "^//\\s*go:generate\\s"
      linters: [ lll ]
    - source: "(noinspection|TODO)"
      linters: [ godot ]
    - source: "//noinspection"
      linters: [ gocritic ]
    - path: "_test\\.go"
      linters:
        - bodyclose
        - dupl
        - funlen
        - goconst
        - gosec
        - noctx
        - wrapcheck
